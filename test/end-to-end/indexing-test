#!/usr/bin/env bash

start_time=$(date +%s)

export START_HEIGHT=0
export STOP_HEIGHT=10

container=$(
  docker run -d \
    -p 4000:4000 \
    -e START_HEIGHT \
    -e STOP_HEIGHT \
    -v $PWD/data/:/app/data \
    $IMAGE_URI
)

function max_height() {
  sqlite3 data/sqlite/core.db "SELECT MAX(height) FROM new_blocks"
}

while [ "0$(max_height)" -ne $STOP_HEIGHT ]; do
  echo $(max_height)
  if [ $(($(date +%s) - $start_time)) -gt 300 ]; then
    echo "Timed out waiting for blocks to import."
    docker logs $container
    docker stop $container
    exit 1
  fi

  echo "Waiting for blocks to import..."
  sleep 5
done

gql_height=$(
  curl \
    -g -X POST \
    -H "Content-Type: application/json" \
    -d '{"query":"query{blocks(first: 1) {edges { node { height }}}}"}' \
    http://localhost:4000/graphql | jq -r '.data.blocks.edges[0].node.height'
)

if [ "$gql_height" != "$STOP_HEIGHT" ]; then
  echo "Unexpected block height from GraphQL: '$gql_height'"
  exit 1
fi

echo "Blocks imported successfully."
docker stop $container

rm data/sqlite/core.db*

# Run a second time to test header caching behavior
container=$(
  docker run -d \
    -p 4000:4000 \
    -e START_HEIGHT \
    -e STOP_HEIGHT \
    -v $PWD/data/:/app/data \
    $IMAGE_URI
)

while [ "0$(max_height)" -ne $STOP_HEIGHT ]; do
  echo $(max_height)
  if [ $(($(date +%s) - $start_time)) -gt 300 ]; then
    echo "Timed out waiting for blocks to import."
    docker logs $container
    docker stop $container
    exit 1
  fi

  echo "Waiting for blocks to import..."
  sleep 5
done

gql_height=$(
  curl \
    -g -X POST \
    -H "Content-Type: application/json" \
    -d '{"query":"query{blocks(first: 1) {edges { node { height }}}}"}' \
    http://localhost:4000/graphql | jq -r '.data.blocks.edges[0].node.height'
)

if [ "$gql_height" != "$STOP_HEIGHT" ]; then
  echo "Unexpected block height from GraphQL: '$gql_height'"
  exit 1
fi

echo "Blocks imported successfully."
docker stop $container
